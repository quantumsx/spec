/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.Path;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.openapitools.sevice.PathService;
import org.openapitools.sevice.impl.PathServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-05T08:42:00.069198300+04:00[Europe/Saratov]")
@Validated
@Tag(name = "Деревья", description = "the Деревья API")
public interface PathApi {

    @Autowired
    public PathService pathService = new PathServiceImpl();

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /path : Метод удаления пройденного пути
     *
     * @return Успешное удаление пути. (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "pathDelete",
        summary = "Метод удаления пройденного пути",
        tags = { "Деревья" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешное удаление пути."),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/path",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> pathDelete(
        
    ) {
        pathService.delete();
        return new ResponseEntity<>(HttpStatus.OK);

    }


    /**
     * GET /path : Метод получения пройденных путей
     *
     * @return Успешный ответ со списком пройденных путей. (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "pathGet",
        summary = "Метод получения пройденных путей",
        tags = { "Деревья" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешный ответ со списком пройденных путей.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Path.class))
            }),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/path",
        produces = { "application/json" }
    )
    default ResponseEntity<Path> pathGet(
        
    ) {
        if(getRequest().isPresent()) {
            for (MediaType mediaType: MediaType.parseMediaTypes(getRequest().get().getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    Path result = pathService.read();

                    return new ResponseEntity<>(HttpStatus.OK).ok(result);
                }
            }
        };
        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);

    }


    /**
     * POST /path : Метод добавления пройденного пути
     *
     * @param path  (required)
     * @return Успешный ответ добавленного пути. (status code 200)
     *         or Что-то пошло не так (status code 200)
     */
    @Operation(
        operationId = "pathPost",
        summary = "Метод добавления пройденного пути",
        tags = { "Деревья" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешный ответ добавленного пути.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Path.class))
            }),
            @ApiResponse(responseCode = "default", description = "Что-то пошло не так", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/path",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Path> pathPost(
        @Parameter(name = "Path", description = "", required = true) @Valid @RequestBody Path path
    ) {
        if(getRequest().isPresent()) {
            for (MediaType mediaType: MediaType.parseMediaTypes(getRequest().get().getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    Path result = pathService.update(path);

                    return new ResponseEntity<>(HttpStatus.OK).ok(result);
                }
            }
        };
        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);

    }

}
